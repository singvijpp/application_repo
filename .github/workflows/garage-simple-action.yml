# This is a basic workflow that is manually triggered

name: Manual workflow to authenticate google cloud
on: 
  workflow_dispatch
  # Inputs the workflow accepts.
  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-secret:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      id-token: write
    steps:
    - name: Checkout
      uses: 'actions/checkout@v2'
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GIT_HUB__CICD_PROVIDE }}
          service_account: ${{ secrets.garage_service_account }}
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: 1.5.2
      
    - name: Install expect
      run: sudo apt-get install -y expect

    - name: Unlock Terraform state
      run: |
        # Create the expect script
        echo '#!/usr/bin/expect -f' > unlock.exp
        echo 'spawn terraform force-unlock $env(LOCK_ID)' >> unlock.exp
        echo 'expect "Do you really want to force-unlock?"' >> unlock.exp
        echo 'send "yes\r"' >> unlock.exp
        echo 'expect eof' >> unlock.exp
        chmod +x unlock.exp

        # Run the expect script
        LOCK_ID=${{ secrets.TERRAFORM_LOCK_ID }} ./unlock.exp

    - name: Run terraform init
      run: |
            pip install apache-airflow-providers-google
            terraform init
   
    - name: Run terraform plan -destroy
      if: github.ref == 'refs/heads/main'
      run: |
            terraform plan -lock=false
    - name: Run terraform apply
      run: |
            terraform apply -auto-approve
